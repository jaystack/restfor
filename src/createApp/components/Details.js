import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import isDeepEqual from 'deep-equal';
import Typography from 'material-ui/Typography';
import Toolbar from 'material-ui/Toolbar';
import Button from 'material-ui/Button';
import { invoke, closeDetails } from '../actionCreators';
import { getType } from '../helpers/types';
import { getComponent, getAdditionalProperties } from './ViewProvider';

class Details extends React.PureComponent {
  static contextTypes = {
    views: PropTypes.object
  };

  state = this.getDefaultState();

  getDefaultState() {
    const { record, schema } = this.props;
    return record
      ? record
      : schema
        ? Object.keys(schema).reduce(
            (record, propertyName) =>
              schema[propertyName].autoGenerated
                ? record
                : {
                    ...record,
                    [propertyName]: getDefaultValue(propertyName, schema[propertyName])
                  },
            {}
          )
        : null;
  }

  componentDidUpdate(prevProps) {
    if (prevProps.record !== this.props.record || prevProps.schema !== this.props.schema)
      this.setState(this.getDefaultState());
  }

  handleChange = propertyName => value => this.setState({ [propertyName]: value });
  handleSave = async () => {
    const { invoke, closeDetails, match: { params: { resourceName, id } } } = this.props;
    if (id === 'new') {
      await invoke('POST', resourceName, '/', { body: [ this.state ] });
      closeDetails();
    } else {
      await invoke('PUT', resourceName, '/:id', { params: { id }, body: this.state }, (state, error, result) => {
        if (error) return state;
        if (result) return { ...state, items: state.items.map(item => (item.id === Number(id) ? result : item)) };
        return state;
      });
    }
  };
  handleRemove = async () => {
    const { invoke, closeDetails, match: { params: { resourceName, id } } } = this.props;
    await invoke('DELETE', resourceName, '/', { body: [ id ] });
    closeDetails();
  };
  handleCancel = () => this.props.closeDetails();

  isSaveButtonDisabled() {
    return isDeepEqual(this.state, this.props.record);
  }

  render() {
    const { match: { params: { resourceName, id } }, schema } = this.props;
    const additionalProperties = getAdditionalProperties(this.context.views, 'editor', schema, resourceName);
    return (
      <div className="fitted column layout Details">
        <header className="dynamic layout">
          <Toolbar style={{ width: '100%' }}>
            <Typography type="title">{`${resourceName.toUpperCase()} / ${id.toString().toUpperCase()}`}</Typography>
            <div style={{ marginLeft: 'auto' }}>
              <Button
                raised
                color="primary"
                onClick={this.handleSave}
                disabled={this.isSaveButtonDisabled()}
                className="left margin"
              >
                Save
              </Button>
              {id !== 'new' && (
                <Button raised color="secondary" onClick={this.handleRemove} className="left margin">
                  Remove
                </Button>
              )}
              <Button raised onClick={this.handleCancel} className="left margin">
                Close
              </Button>
            </div>
          </Toolbar>
        </header>
        <main className="fitted column layout overflow-y">
          {schema &&
          this.state && (
            <table>
              <tbody>
                {Object.keys(schema).map(
                  propertyName =>
                    !(id === 'new' && schema[propertyName].autoGenerated) && (
                      <tr key={propertyName}>
                        <td>
                          <b>{propertyName}</b>
                        </td>
                        <td>
                          {getComponent('editor')(this.context.views, resourceName, {
                            propertyName,
                            value: this.state[propertyName],
                            record: this.state,
                            schema,
                            onChange: this.handleChange(propertyName)
                          })}
                        </td>
                      </tr>
                    )
                )}
                {additionalProperties.map(
                  propertyName =>
                    id !== 'new' && (
                      <tr key={propertyName}>
                        <td>
                          <b>{propertyName}</b>
                        </td>
                        <td>
                          {getComponent('editor')(this.context.views, resourceName, {
                            propertyName,
                            record: this.state
                          })}
                        </td>
                      </tr>
                    )
                )}
              </tbody>
            </table>
          )}
        </main>
      </div>
    );
  }
}

const getDefaultValue = (propertyName, schema) => {
  switch (schema.type) {
    case 'BOOLEAN':
      return false;
    case 'DATE':
      return new Date().toISOString();
    case 'ENUM':
      return (schema.values && schema.values[0]) || null;
    default:
      return getType(schema.type) === 'number' ? 1 : '';
  }
};

export default connect(
  ({ schemas, resources }, { match: { params: { resourceName, id } } }) => ({
    schema: schemas[resourceName],
    record: ((resources[resourceName] && resources[resourceName].items) || []).find(record => record.id === Number(id))
  }),
  { invoke, closeDetails }
)(Details);
