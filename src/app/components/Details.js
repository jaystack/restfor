import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import Typography from 'material-ui/Typography';
import AppBar from 'material-ui/AppBar';
import Toolbar from 'material-ui/Toolbar';
import Button from 'material-ui/Button';
import { Link } from 'react-router-dom';
import Card, { CardActions, CardContent } from 'material-ui/Card';
import { invoke, closeDetails } from '../actionCreators';
import { getRecord, getSchema, getId, getResourceName, getPathname, getSegment, } from '../selectors';
import { getField, getAdditionalProperties } from './ViewProvider';
import DeleteDialog from './DeleteDialog';
import ActionProvider from './ActionProvider';

class Details extends React.PureComponent {
  static contextTypes = {
    views: PropTypes.object
  };

  state = { deleteDialogWindow: false };

  handleConfirmWindow = () => {
    this.setState({ deleteDialogWindow: true });
  };

  handleConfirmClose = answer => {
    this.setState({ deleteDialogWindow: false });
    if (!answer) return false;
    this.handleRemove();
  };

  handleRemove = async () => {
    const { invoke, closeDetails, resourceName, id } = this.props;
    await invoke('DELETE', resourceName, '/', { body: [id] });
    closeDetails();
  };

  handleCancel = () => this.props.closeDetails();

  render() {
    const { resourceName, id, schema, record, invoke, pathname } = this.props;
    const title = `${resourceName.toUpperCase()} / ${id.toString().toUpperCase()}`;
    const additionalProperties = getAdditionalProperties(this.context.views, 'details', schema, resourceName);
    return (
      <div className="fitted column layout Details">
        <header className="dynamic layout">
          <AppBar position="static" color="default">
            <Toolbar style={{ width: '100%' }}>
              <Typography type="title">{title}</Typography>
              <div style={{ marginLeft: 'auto' }}>
                <ActionProvider view="details" actionProps={{ record: this.props.record }} />
                <Link to={`${pathname}/edit`}>
                  <Button raised color="primary" className="left margin">
                    Edit
                  </Button>
                </Link>
                {id !== 'new' &&
                  <Button raised color="secondary" onClick={this.handleConfirmWindow} className="left margin">
                    Remove
                  </Button>}
                <Button raised onClick={this.handleCancel} className="left margin">
                  Close
                </Button>
              </div>
            </Toolbar>
          </AppBar>
        </header>
        <main className="fitted column layout overflow">
          <Card style={{ maxWidth: '800px' }}>
            <CardContent>
              {schema &&
                record &&
                <table>
                  <tbody>
                    {Object.keys(schema).map(
                      propertyName =>
                        !(id === 'new' && schema[propertyName].autoGenerated) &&
                        <tr key={propertyName}>
                          <td>
                            <b>{propertyName}</b>
                          </td>
                          <td>
                            {getField('details')(this.context.views, resourceName, {
                              propertyName,
                              value: record[propertyName],
                              record,
                              schema,
                              invoke
                            })}
                          </td>
                        </tr>
                    )}
                    {additionalProperties.map(
                      propertyName =>
                        id !== 'new' &&
                        <tr key={propertyName}>
                          <td>
                            <b>{propertyName}</b>
                          </td>
                          <td>
                            {getField('details')(this.context.views, resourceName, {
                              propertyName,
                              record,
                              invoke
                            })}
                          </td>
                        </tr>
                    )}
                  </tbody>
                </table>}
            </CardContent>
          </Card>
          <DeleteDialog isOpened={this.state.deleteDialogWindow} handleClose={this.handleConfirmClose} />
        </main>
      </div>
    );
  }
}

export default connect(
  state => ({
    id: getId(state),
    resourceName: getResourceName(state),
    schema: getSchema(state),
    record: getRecord(state),
    pathname: getPathname(state),
    segment: getSegment(state)
  }),
  { invoke, closeDetails }
)(Details);
