import React from 'react';
import { connect } from 'react-redux';
import isDeepEqual from 'deep-equal';
import { Toolbar, ToolbarGroup, ToolbarTitle } from 'material-ui/Toolbar';
import RaisedButton from 'material-ui/RaisedButton';
import TextField from 'material-ui/TextField';
import Toggle from 'material-ui/Toggle';
import SelectField from 'material-ui/SelectField';
import MenuItem from 'material-ui/MenuItem';
import DateTimePicker from 'material-ui-datetimepicker';
import DatePickerDialog from 'material-ui/DatePicker/DatePickerDialog';
import TimePickerDialog from 'material-ui/TimePicker/TimePickerDialog';
import { invoke, closeDetails } from '../actionCreators';
import './Details.css';

class Details extends React.PureComponent {
  state = this.getDefaultState();

  getDefaultState() {
    const { record, schema } = this.props;
    return record
      ? record
      : schema
        ? Object.keys(schema).reduce(
            (record, propertyName) =>
              schema[propertyName].autoGenerated
                ? record
                : {
                    ...record,
                    [propertyName]: getDefaultValue(propertyName, schema[propertyName])
                  },
            {}
          )
        : null;
  }

  componentDidUpdate(prevProps) {
    if (prevProps.record !== this.props.record || prevProps.schema !== this.props.schema)
      this.setState(this.getDefaultState());
  }

  handleChange = propertyName => value => this.setState({ [propertyName]: value });
  handleSave = async () => {
    const { invoke, closeDetails, params: { resourceName, id } } = this.props;
    if (id === 'new') {
      await invoke('POST', resourceName, '/', { body: [ this.state ] });
    } else {
      await invoke('PUT', resourceName, '/:id', { params: { id }, body: this.state });
    }
    closeDetails();
  };
  handleRemove = async () => {
    const { invoke, closeDetails, params: { resourceName, id } } = this.props;
    await invoke('DELETE', resourceName, '/', { body: [ id ] });
    closeDetails();
  };
  handleCancel = () => this.props.closeDetails();

  isSaveButtonDisabled() {
    return isDeepEqual(this.state, this.props.record);
  }

  render() {
    const { params: { resourceName, id }, schema } = this.props;
    return (
      <div className="fitted column layout Details">
        <header className="dynamic layout">
          <Toolbar style={{ width: '100%' }}>
            <ToolbarGroup>
              <ToolbarTitle text={`${resourceName.toUpperCase()} / ${id.toString().toUpperCase()}`} />
            </ToolbarGroup>
            <ToolbarGroup>
              <RaisedButton label="Save" primary onClick={this.handleSave} disabled={this.isSaveButtonDisabled()} />
              {id !== 'new' && <RaisedButton label="Remove" secondary onClick={this.handleRemove} />}
              <RaisedButton label="Close" onClick={this.handleCancel} />
            </ToolbarGroup>
          </Toolbar>
        </header>
        <main className="fitted column layout overflow-y">
          {schema &&
          this.state && (
            <table>
              <tbody>
                {Object.keys(schema).map(
                  propertyName =>
                    !(id === 'new' && schema[propertyName].autoGenerated) && (
                      <tr key={propertyName}>
                        <td>
                          <b>{propertyName}</b>
                        </td>
                        <td>
                          {getPropertyComponent(
                            propertyName,
                            this.state[propertyName],
                            this.handleChange(propertyName),
                            schema[propertyName]
                          )}
                        </td>
                      </tr>
                    )
                )}
              </tbody>
            </table>
          )}
        </main>
      </div>
    );
  }
}

const numberTypes = [ 'TINYINT', 'SMALLINT', 'MEDIUMINT', 'INTEGER', 'BIGINT', 'FLOAT', 'DOUBLE', 'DECIMAL', 'REAL' ];

const getPropertyComponent = (propertyName, value, onChange, schema) => {
  switch (schema.type) {
    case 'BOOLEAN':
      return <Toggle toggled={value} disabled={schema.autoGenerated} onToggle={(_, value) => onChange(value)} />;
    case 'DATE':
      return (
        <DateTimePicker
          value={value ? new Date(value) : null}
          DatePicker={DatePickerDialog}
          TimePicker={TimePickerDialog}
          onChange={value => onChange(value.toISOString())}
          disabled={schema.autoGenerated}
        />
      );
    case 'ENUM':
      return (
        <SelectField value={value} onChange={(_, __, value) => onChange(value)}>
          {schema.values.map(value => <MenuItem key={value} value={value} primaryText={value} />)}
        </SelectField>
      );
    default:
      const isNumber = numberTypes.includes(schema.type);
      return (
        <TextField
          name={propertyName}
          type={isNumber ? 'number' : 'text'}
          value={value}
          onChange={(_, value) => onChange(isNumber ? Number(value) : value)}
          disabled={schema.autoGenerated}
        />
      );
  }
};

const getDefaultValue = (propertyName, schema) => {
  switch (schema.type) {
    case 'BOOLEAN':
      return false;
    case 'DATE':
      return new Date().toISOString();
    case 'ENUM':
      return (schema.values && schema.values[0]) || null;
    default:
      const isNumber = numberTypes.includes(schema.type);
      return isNumber ? 0 : '';
  }
};

export default connect(
  ({ schemas, resources }, { params: { resourceName, id } }) => ({
    schema: schemas[resourceName],
    record: ((resources[resourceName] && resources[resourceName].items) || []).find(record => record.id === Number(id))
  }),
  { invoke, closeDetails }
)(Details);
